# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/106etUpHaDzp2mYSCrGrkB6S_SJKRRYfj
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# -------------------------------
# 1. Generate and Plot Two Random Vectors
# -------------------------------
# a. Create two vectors, each containing 15 random floats.
vector1 = np.random.rand(15)
vector2 = np.random.rand(15)

# b. Plot both vectors on the same graph
plt.figure(figsize=(8, 5))
plt.plot(vector1, marker='o', label='Vector 1')
plt.plot(vector2, marker='s', label='Vector 2')
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Comparison of Two Random Vectors')
plt.legend()
plt.grid(True)
plt.show()

# -------------------------------
# 2. Generate and Visualize a Random Matrix
# -------------------------------
# a. Create a 4x4 matrix with random values
matrix = np.random.rand(4, 4)

# b. Display as heatmap using seaborn
plt.figure(figsize=(6, 5))
sns.heatmap(matrix, annot=True, cmap='viridis', xticklabels=[f'Col {i}' for i in range(4)], yticklabels=[f'Row {i}' for i in range(4)])
plt.title("4x4 Random Matrix Heatmap")
plt.xlabel("Columns")
plt.ylabel("Rows")
plt.show()

# -------------------------------
# 3. Matrix Operations and Visualization
# -------------------------------
# a. Create two 4x4 matrices
A = np.random.rand(4, 4)
B = np.random.rand(4, 4)

# b. Perform matrix operations
add_result = A + B
sub_result = A - B
mul_result = A @ B  # matrix multiplication

# c. Function to plot matrix as bar plot
def plot_matrix_bar(matrix, title):
    flat = matrix.flatten()
    plt.figure(figsize=(8, 4))
    plt.bar(range(len(flat)), flat)
    plt.title(title)
    plt.xlabel('Element Index')
    plt.ylabel('Value')
    plt.show()

# Visualize results
plot_matrix_bar(add_result, 'Matrix Addition Result')
plot_matrix_bar(sub_result, 'Matrix Subtraction Result')
plot_matrix_bar(mul_result, 'Matrix Multiplication Result')

# -------------------------------
# (Optional) Matrix Analysis using your provided operations
# -------------------------------
print("\n--- Additional Matrix Analysis on A ---")
print("Matrix A:\n", A)
print("Size of A:", A.shape)
print("Determinant of A:", np.linalg.det(A))
if np.linalg.det(A) != 0:
    print("Inverse of A:\n", np.linalg.inv(A))
else:
    print("Matrix is singular, cannot compute inverse.")
print("Rank of A:", np.linalg.matrix_rank(A))
eigenvalues, eigenvectors = np.linalg.eig(A)
print("Eigenvalues of A:", eigenvalues)
print("Eigenvectors of A:\n", eigenvectors)
char_poly = np.poly(A)
print("Characteristic Polynomial Coefficients:", char_poly)
print("Roots of Characteristic Polynomial (Eigenvalues):", np.roots(char_poly))